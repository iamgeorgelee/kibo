{
    "project": {
        "name": "kibo",
        "description": "",
        "version": "0.0.1",
        "url": ""
    },
    "files": {
        "controllers/eventController.js": {
            "name": "controllers/eventController.js",
            "modules": {},
            "classes": {
                "eventContorller": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers/restController.js": {
            "name": "controllers/restController.js",
            "modules": {},
            "classes": {
                "restController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers/userController.js": {
            "name": "controllers/userController.js",
            "modules": {},
            "classes": {
                "UserController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "routes/dbRoutes.js": {
            "name": "routes/dbRoutes.js",
            "modules": {},
            "classes": {
                "dbController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app.js": {
            "name": "app.js",
            "modules": {
                "Kibo": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Kibo": {
            "name": "Kibo",
            "submodules": {},
            "classes": {
                "eventContorller": 1,
                "restController": 1,
                "UserController": 1,
                "dbController": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "routes/dbRoutes.js",
            "line": 1
        }
    },
    "classes": {
        "eventContorller": {
            "name": "eventContorller",
            "shortname": "eventContorller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Kibo",
            "file": "controllers/eventController.js",
            "line": 5,
            "description": "User API",
            "is_constructor": 1
        },
        "restController": {
            "name": "restController",
            "shortname": "restController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Kibo",
            "file": "controllers/restController.js",
            "line": 1,
            "description": "Restaurant API",
            "is_constructor": 1
        },
        "UserController": {
            "name": "UserController",
            "shortname": "UserController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Kibo",
            "file": "controllers/userController.js",
            "line": 1,
            "description": "User API",
            "is_constructor": 1
        },
        "dbController": {
            "name": "dbController",
            "shortname": "dbController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Kibo",
            "file": "routes/dbRoutes.js",
            "line": 1,
            "description": "MongoLab API",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "controllers/eventController.js",
            "line": 16,
            "description": "[GET]\n\nGet app user list",
            "itemtype": "method",
            "name": "getUsers",
            "return": {
                "description": "app user list",
                "type": "JSON"
            },
            "example": [
                " /api/getUsers"
            ],
            "class": "eventContorller"
        },
        {
            "file": "controllers/eventController.js",
            "line": 32,
            "description": "[GET]\n\nGet event by id",
            "itemtype": "method",
            "name": "getEventById",
            "params": [
                {
                    "name": "eventId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "event data",
                "type": "JSON"
            },
            "example": [
                " /api/event/:eventId"
            ],
            "class": "eventContorller"
        },
        {
            "file": "controllers/eventController.js",
            "line": 49,
            "description": "[POST]\n\nCreate Event\n(should add send friend request later on)",
            "itemtype": "method",
            "name": "createEvent",
            "params": [
                {
                    "name": "userId",
                    "description": "User who wants to add friend",
                    "type": "String"
                },
                {
                    "name": "friendId",
                    "description": "Friend to add (in request content)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/event\n{\n\t  \"name\": \"test1\",\n\t  \"time\": \"6:30\",\n\t  \"Date\": \"11/11/2014\",\n\t  \"guest\": [\n\t    {\n\t      \"id\": \"a45612378\"\n\t    },\n\t    {\n\t      \"id\": \"a445122378\"\n\t    }\n\t  ],\n\t  \"creater\": \"a123456789\"\n\t}\n"
            ],
            "class": "eventContorller"
        },
        {
            "file": "controllers/eventController.js",
            "line": 83,
            "description": "[PUT]\n\nguest RSVP",
            "itemtype": "method",
            "name": "RSVP",
            "params": [
                {
                    "name": "userId",
                    "description": "User who wants to add friend",
                    "type": "String"
                },
                {
                    "name": "friendId",
                    "description": "Friend to add (in request content)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/event"
            ],
            "class": "eventContorller"
        },
        {
            "file": "controllers/restController.js",
            "line": 11,
            "description": "[GET]\n\nGet recommand restaurant list\n\npayload should look like this\n{  \"participants\": [\n    {\n      \"userId\": \"123456\",\n      \"userPreference\": [\"chinese\", \"mexican\"],\n      \"userLocation\": [37.353596, -121.824393]\n    },\n    {\n      \"userId\": \"154345\",\n      \"userPreference\": [\"korean\", \"pizza\", \"italian\"],\n      \"userLocation\": [37.571382, -122.327199]\n    }]\n}\nPlease remember this should encode with base64 utf-8 format before it sent",
            "itemtype": "method",
            "name": "getRecommendRest",
            "params": [
                {
                    "name": "participants",
                    "description": "(uft-8 encoded)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "restaurant list",
                "type": "JSON"
            },
            "example": [
                " /api/getRecommendRest"
            ],
            "class": "restController"
        },
        {
            "file": "controllers/userController.js",
            "line": 160,
            "description": "Clearly a stupid way and obviously there will be a problem when web page user and mobile user do facebook auth the same time.\nSince we dont really need to care about web page right now, temporary ignore it. Need to fix later.",
            "itemtype": "attribute",
            "name": "",
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 202,
            "description": "Needs to verify later, since the callback changed due to support API.",
            "itemtype": "attribute",
            "name": "",
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 231,
            "description": "[POST]\n\nPerform sign up for local account",
            "itemtype": "method",
            "name": "localSignup",
            "params": [
                {
                    "name": "username",
                    "description": "(in request content)",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "(in request content)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/localSignup"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 247,
            "description": "[POST]\n\nPerform login for local account",
            "itemtype": "method",
            "name": "localLogin",
            "params": [
                {
                    "name": "username",
                    "description": "(in request content)",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "(in request content)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/localLogin"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 263,
            "description": "[GET]\n\nPerform facebook account authentication.\nScope defines what kind of data you want user to authorize you.\nAfter perform facebook account authentication, facebook will render to callback location.",
            "itemtype": "method",
            "name": "fbAuth",
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/fbAuth"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 280,
            "description": "After perform facebook account authentication, facebook will render back to this location.\nThis is for facebook itself.",
            "itemtype": "method",
            "name": "fbAuth/Callback",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 301,
            "description": "[GET]\n\nGet app user list",
            "itemtype": "method",
            "name": "getUsers",
            "return": {
                "description": "app user list",
                "type": "JSON"
            },
            "example": [
                " /api/getUsers"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 317,
            "description": "[GET]\n\nGet user by id",
            "itemtype": "method",
            "name": "getUserById",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 334,
            "description": "[GET]\n\nGet facebook friends who also authorize this app.",
            "itemtype": "method",
            "name": "getFbFriends",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "facebook friends",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/getFbFriends"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 351,
            "description": "[GET]\n\nGet friend list",
            "itemtype": "method",
            "name": "getFriendList",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "List of friends",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/getFriendList"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 368,
            "description": "[POST]\n\nAdd friend\n\nAvoid use this function directly, should do review friend request instead",
            "itemtype": "method",
            "name": "addFriend",
            "params": [
                {
                    "name": "userId",
                    "description": "User who wants to add friend",
                    "type": "String"
                },
                {
                    "name": "friendId",
                    "description": "Friend to add (in request content)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/addFriend"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 388,
            "description": "[POST]\n\nUnfriend",
            "itemtype": "method",
            "name": "unfriend",
            "params": [
                {
                    "name": "userId",
                    "description": "User who wants to unfriend",
                    "type": "String"
                },
                {
                    "name": "friendId",
                    "description": "Friend to remove (in request content)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/unfriend"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 406,
            "description": "[GET]\n\nGet a list of app user you can add them as friend\nWhen this is useful? User wants to add friend via 'Search by name'",
            "itemtype": "method",
            "name": "getFriendCandidate",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "List of app user to add",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/getFriendCandidate"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 424,
            "description": "[GET]\n\nGet a list of app user who is your facebook friend but not your friend in this app\nWhen this is useful? User wants to add friend via 'Find friends from facebook'",
            "itemtype": "method",
            "name": "getFbFriendCandidate",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "List of app user to add",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/getFbFriendCandidate"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 442,
            "description": "[POST]\n\nSend a friend request.\n\nuserA send a friend request to userB, in user B's DB entry will record the request.",
            "itemtype": "method",
            "name": "friendReq",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "toFriendId",
                    "description": "(in request content)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Success",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/friendReq"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 455,
            "description": "[GET]\n\nGet friend requests",
            "itemtype": "method",
            "name": "friendReq",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "List of friend requests",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/friendReq"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 477,
            "description": "[GET]\n\nReview friend request, also need to tell approve or deny\nFirst will remove the entry in friendReq and if it's approved it will do add friend",
            "itemtype": "method",
            "name": "reviewFriendReq",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "approve",
                    "description": "(in request content)",
                    "type": "Boolean"
                },
                {
                    "name": "reviewId",
                    "description": "(in request content)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Success",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/reviewFriendReq"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 497,
            "description": "[POST]\n\nSet user preference",
            "itemtype": "method",
            "name": "userPreference",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "preference",
                    "description": "Send all user preference, not just the one to add or remove",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Success",
                "type": "Boolean"
            },
            "example": [
                " /api/user/:userId/userPreference"
            ],
            "class": "UserController"
        },
        {
            "file": "controllers/userController.js",
            "line": 508,
            "description": "[GET]\n\nGet user preference",
            "itemtype": "method",
            "name": "userPreference",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user preference",
                "type": "Json"
            },
            "example": [
                " /api/user/:userId/userPreference"
            ],
            "class": "UserController"
        },
        {
            "file": "routes/dbRoutes.js",
            "line": 59,
            "description": "Get collection by collection name",
            "itemtype": "method",
            "name": "getCollection",
            "params": [
                {
                    "name": "collectionName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "userList",
                "type": "JSON"
            },
            "class": "dbController"
        },
        {
            "file": "routes/dbRoutes.js",
            "line": 74,
            "description": "Get document by document name\ne.g. Get User by userid",
            "itemtype": "method",
            "name": "getDocument",
            "params": [
                {
                    "name": "collectionName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "documentName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user",
                "type": "JSON"
            },
            "class": "dbController"
        },
        {
            "file": "routes/dbRoutes.js",
            "line": 91,
            "description": "Create user",
            "itemtype": "method",
            "name": "createUser",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "user",
                "type": "JSON"
            },
            "class": "dbController"
        },
        {
            "file": "routes/dbRoutes.js",
            "line": 104,
            "description": "Update user",
            "itemtype": "method",
            "name": "updateUser",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "user",
                "type": "JSON"
            },
            "example": [
                " Example of input\n {\"$set\": {\n      username: username,\n      password: generateHash(password)\n }}"
            ],
            "class": "dbController"
        },
        {
            "file": "routes/dbRoutes.js",
            "line": 123,
            "description": "Create Event",
            "itemtype": "method",
            "name": "createEvent",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "event",
                "type": "JSON"
            },
            "class": "dbController"
        },
        {
            "file": "routes/dbRoutes.js",
            "line": 137,
            "description": "Update Event",
            "itemtype": "method",
            "name": "updateEvent",
            "params": [
                {
                    "name": "EventId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "event",
                "type": "JSON"
            },
            "example": [
                " Example of input\n {\"$set\": {\n      username: username,\n      password: generateHash(password)\n }}"
            ],
            "class": "dbController"
        }
    ],
    "warnings": []
}