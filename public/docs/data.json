{
    "project": {
        "name": "kibo",
        "description": "",
        "version": "0.0.1",
        "url": ""
    },
    "files": {
        "routes/dbRoutes.js": {
            "name": "routes/dbRoutes.js",
            "modules": {},
            "classes": {
                "dbController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "routes/userRoutes.js": {
            "name": "routes/userRoutes.js",
            "modules": {},
            "classes": {
                "UserRoutes": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app.js": {
            "name": "app.js",
            "modules": {
                "Kibo": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Kibo": {
            "name": "Kibo",
            "submodules": {},
            "classes": {
                "dbController": 1,
                "UserRoutes": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "routes/userRoutes.js",
            "line": 1
        }
    },
    "classes": {
        "dbController": {
            "name": "dbController",
            "shortname": "dbController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Kibo",
            "file": "routes/dbRoutes.js",
            "line": 1,
            "description": "MongoLab API",
            "is_constructor": 1
        },
        "UserRoutes": {
            "name": "UserRoutes",
            "shortname": "UserRoutes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Kibo",
            "file": "routes/userRoutes.js",
            "line": 1,
            "description": "User API",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "routes/dbRoutes.js",
            "line": 12,
            "description": "Get collection by collection name",
            "itemtype": "method",
            "name": "getCollection",
            "params": [
                {
                    "name": "collectionName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "userList",
                "type": "JSON"
            },
            "class": "dbController"
        },
        {
            "file": "routes/dbRoutes.js",
            "line": 27,
            "description": "Get document by document name\ne.g. Get User by userid",
            "itemtype": "method",
            "name": "getDocument",
            "params": [
                {
                    "name": "collectionName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "documentName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user",
                "type": "JSON"
            },
            "class": "dbController"
        },
        {
            "file": "routes/dbRoutes.js",
            "line": 44,
            "description": "Create user",
            "itemtype": "method",
            "name": "createUser",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "user",
                "type": "JSON"
            },
            "class": "dbController"
        },
        {
            "file": "routes/dbRoutes.js",
            "line": 57,
            "description": "Update user",
            "itemtype": "method",
            "name": "updateUser",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "user",
                "type": "JSON"
            },
            "example": [
                " Example of input\n {\"$set\": {\n      username: username,\n      password: User.generateHash(password)\n }}"
            ],
            "class": "dbController"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 76,
            "description": "Clearly a stupid way and obviously there will be a problem when web page user and mobile user do facebook auth the same time.\nSince we dont really need to care about web page right now, temporary ignore it. Need to fix later.",
            "itemtype": "attribute",
            "name": "",
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 118,
            "description": "Needs to verify later, since the callback changed due to support API.",
            "itemtype": "attribute",
            "name": "",
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 147,
            "description": "[POST]\n\nPerform sign up for local account",
            "itemtype": "method",
            "name": "localSignup",
            "params": [
                {
                    "name": "username",
                    "description": "(in header)",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "(in header)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/localSignup"
            ],
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 163,
            "description": "[POST]\n\nPerform login for local account",
            "itemtype": "method",
            "name": "localLogin",
            "params": [
                {
                    "name": "username",
                    "description": "(in header)",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "(in header)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/localLogin"
            ],
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 179,
            "description": "[GET]\n\nPerform facebook account authentication.\nScope defines what kind of data you want user to authorize you.\nAfter perform facebook account authentication, facebook will render to callback location.",
            "itemtype": "method",
            "name": "fbAuth",
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/fbAuth"
            ],
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 197,
            "description": "After perform facebook account authentication, facebook will render back to this location.\nThis is for facebook itself.",
            "itemtype": "method",
            "name": "fbAuth/Callback",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 218,
            "description": "[GET]\n\nGet app user list",
            "itemtype": "method",
            "name": "getUsers",
            "return": {
                "description": "app user list",
                "type": "JSON"
            },
            "example": [
                " /api/getUsers"
            ],
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 234,
            "description": "[GET]\n\nGet user by id",
            "itemtype": "method",
            "name": "getUserById",
            "params": [
                {
                    "name": "userId",
                    "description": "(in url)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId"
            ],
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 251,
            "description": "[GET]\n\nGet facebook friends who also authorize this app.",
            "itemtype": "method",
            "name": "getFbFriends",
            "params": [
                {
                    "name": "userId",
                    "description": "(in url)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "facebook friends",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/getFbFriends"
            ],
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 268,
            "description": "[GET]\n\nGet friend list",
            "itemtype": "method",
            "name": "getFriendList",
            "params": [
                {
                    "name": "userId",
                    "description": "(in url)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "List of friends",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/getFriendList"
            ],
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 285,
            "description": "[POST]\n\nAdd friend\n(should add send friend request later on)",
            "itemtype": "method",
            "name": "addFriend",
            "params": [
                {
                    "name": "userId",
                    "description": "User who wants to add friend (in url)",
                    "type": "String"
                },
                {
                    "name": "friendId",
                    "description": "Friend to add (in header)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/addFriend"
            ],
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 304,
            "description": "[POST]\n\nUnfriend",
            "itemtype": "method",
            "name": "unfriend",
            "params": [
                {
                    "name": "userId",
                    "description": "User who wants to unfriend (in url)",
                    "type": "String"
                },
                {
                    "name": "friendId",
                    "description": "Friend to remove (in header)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "user data",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/addFriend"
            ],
            "class": "UserRoutes"
        },
        {
            "file": "routes/userRoutes.js",
            "line": 322,
            "description": "[GET]\n\nGet a list of friend who is not your app friend, so can add them as friend later",
            "itemtype": "method",
            "name": "getFriendCandidate",
            "params": [
                {
                    "name": "userId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "List of friend to add",
                "type": "JSON"
            },
            "example": [
                " /api/user/:userId/getFriendCandidate"
            ],
            "class": "UserRoutes"
        }
    ],
    "warnings": []
}